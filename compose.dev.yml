name: carhive

services:
   cache:
      image: redis:7-alpine
      volumes: [ cache-data:/data ]
      ports: [ "6379:6379" ]
      command: redis-server --requirepass ${CACHE_PASSWORD} --protected-mode yes
      networks: [ carhive-network ]

   message-queue:
      image: rabbitmq:4-management-alpine
      environment:
         RABBITMQ_DEFAULT_USER: ${MESSAGE_QUEUE_USER}
         RABBITMQ_DEFAULT_PASS: ${MESSAGE_QUEUE_PASSWORD}
      networks: [ carhive-network ]
      ports:
         - "5672:5672"
         - "15672:15672"
      volumes:
         - message-queue-data:/var/lib/rabbitmq

   proxy:
      image: nginx:1.27-alpine
      environment: { }
      volumes:
         - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      networks: [ carhive-network ]
      ports: [ "8080:80" ]
      depends_on:
         - gateway

   gateway:
      build:
         context: ./app/services/gateway
         dockerfile: Dockerfile.development
      depends_on:
         - account-service
         - scraping-service
         - listing-service
      networks: [ carhive-network ]
      ports: [ "3005:3000" ]
      init: true
      volumes:
         - ./storage/:/storage/
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/gateway/
               target: /app/
            -  action: rebuild
               path: ./app/services/gateway/package.json
            -  action: sync+restart
               path: ./app/services/gateway/nest-cli.json
               target: /app/nest-cli.json
      env_file: [ ./app/services/gateway/.env.development ]
      healthcheck:
        &nodejs-healthcheck
         test: [
            "CMD", "curl", "-X", "GET", "http://localhost:3000/api/v1/health",
            "-H", "accept: application/json", "-H", "X-API-KEY: ${API_KEY}"
         ]
         interval: 60s
         timeout: 1s
         retries: 2
         start_period: 30s

   account-db:
      image: postgres:17-alpine
      environment:
         POSTGRES_DB: account_db
         POSTGRES_USER: ${ACCOUNT_DB_USER}
         POSTGRES_PASSWORD: ${ACCOUNT_DB_PASSWORD}
      ports: [ "5433:5432" ]
      networks: [ carhive-network ]
      volumes: [ account-db-data:/var/lib/postgresql/data ]

#   listing-db:
#      image: postgres:17-alpine
#      environment:
#         POSTGRES_DB: listing_db
#         POSTGRES_USER: ${LISTING_DB_USER}
#         POSTGRES_PASSWORD: ${LISTING_DB_PASSWORD}
#      ports: [ "5434:5432" ]
#      networks: [ carhive-network ]
#      volumes: [ listing-db-data:/var/lib/postgresql/data ]

   listing-db:
      image: pgvector/pgvector:pg17
      environment:
         POSTGRES_DB: listing_db
         POSTGRES_USER: ${LISTING_DB_USER}
         POSTGRES_PASSWORD: ${LISTING_DB_PASSWORD}
      ports: [ "5434:5432" ]
      networks: [ carhive-network ]
      volumes: [ listing-db-data:/var/lib/postgresql/data ]

   scraper-db:
      image: postgres:17-alpine
      environment:
         POSTGRES_DB: scraper_db
         POSTGRES_USER: ${SCRAPER_DB_USER}
         POSTGRES_PASSWORD: ${SCRAPER_DB_PASSWORD}
      ports: [ "5435:5432" ]
      networks: [ carhive-network ]
      volumes: [ scraper-db-data:/var/lib/postgresql/data ]

   account-service:
      build:
         context: ./app/services/account-service
         dockerfile: Dockerfile.development
      depends_on:
         - account-db
      networks: [ carhive-network ]
      ports: [ "3001:3000" ]
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/account-service/
               target: /app/
            -  action: rebuild
               path: ./app/services/account-service/package.json
            -  action: sync+restart
               path: ./app/services/account-service/nest-cli.json
               target: /app/nest-cli.json
      init: true
      env_file: [ ./app/services/account-service/.env.development ]
      healthcheck: *nodejs-healthcheck

   recommendation-service:
      build:
         context: app/services/recommendation-service
         dockerfile: Dockerfile.development
      networks: [ carhive-network ]
      init: true
      ports: [ "3004:3000" ]
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/recommendation-service/
               target: /app/
            -  action: rebuild
               path: ./app/services/recommendation-service/package.json
            -  action: sync+restart
               path: ./app/services/recommendation-service/nest-cli.json
               target: /app/nest-cli.json
      env_file: [ app/services/recommendation-service/.env.development ]
      healthcheck: *nodejs-healthcheck

   listing-service:
      build:
         context: app/services/listing-service
         dockerfile: Dockerfile.development
      depends_on:
         - listing-db
      ports: [ "3002:3000" ]
      init: true
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/listing-service/
               target: /app/
            -  action: rebuild
               path: ./app/services/listing-service/package.json
            -  action: sync+restart
               path: ./app/services/listing-service/nest-cli.json
               target: /app/nest-cli.json
      networks: [ carhive-network ]
      env_file: [ app/services/listing-service/.env.development ]
      healthcheck: *nodejs-healthcheck

   scraping-service:
      build:
         context: ./app/services/scraping-service/
         dockerfile: Dockerfile.development
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/scraping-service/
               target: /app/
            -  action: rebuild
               path: ./app/services/scraping-service/package.json
            -  action: sync+restart
               path: ./app/services/scraping-service/nest-cli.json
               target: /app/nest-cli.json
      ports: [ "3003:3000" ]
      init: true
      depends_on:
         - message-queue
      networks: [ carhive-network ]
      env_file: [ app/services/scraping-service/.env.development ]
      healthcheck: *nodejs-healthcheck

   scraping-worker:
      build:
         context: ./app/services/scraping-worker
         dockerfile: Dockerfile.development
      scale: 1
      init: true
      develop:
         watch:
            -  action: sync+restart
               path: ./app/services/scraping-worker/
               target: /app/
            -  action: rebuild
               path: ./app/services/scraping-worker/package.json
            -  action: sync+restart
               path: ./app/services/scraping-worker/nest-cli.json
               target: /app/nest-cli.json
      depends_on:
         - message-queue
      networks: [ carhive-network ]
      env_file: [ ./app/services/scraping-worker/.env.development ]
      healthcheck: *nodejs-healthcheck

   ui:
      build:
         context: app/ui
         dockerfile: Dockerfile
      ports: [ "3000:3000" ]
      networks: [ carhive-network ]
      env_file: [ app/ui/.env.development ]
      profiles: [ ui ]

volumes:
   cache-data: { }
   account-db-data: { }
   listing-db-data: { }
   scraper-db-data: { }
   message-queue-data: { }
   storage-data: { }

networks:
   carhive-network: { }
